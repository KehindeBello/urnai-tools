@startuml

title Training Loop - Sequence Diagram

group trainer.training_loop()
    
    Trainer -> Logger: << creates >>
    activate Logger
    Trainer <-- Logger: new Logger
    deactivate Logger
    
    Trainer -> Environment: reset()
    activate Environment
    Trainer <- Environment: obs
    deactivate Environment
    
    Trainer -> Agent: reset()
    activate Agent
    deactivate Agent
    
    Trainer -> Logger: record_episode_start()
    activate Logger
    deactivate Logger
    
    loop for i in range(max_steps):
    
        Trainer -> Agent: step(obs, done, is_testing) 
        activate Agent
        note right 
            Choosing an action and passing it to our env.step() 
            in order to act on our environment.
        end note
        Trainer <-- Agent: action
        deactivate Agent
        
        Trainer -> Environment: step(action) 
        activate Environment
        note right 
            Take the action (a) 
                 and reward (r)
        end note
        Trainer <-- Environment: obs, default_reward, done
        deactivate Environment
        
        Trainer -> Agent: get_reward(obs, default_reward, done) 
        activate Agent
        Trainer <-- Agent: step_reward
        deactivate Agent
        
        group if done:
        
            Trainer -> Logger: record_episode()
            activate Logger
            deactivate Logger
        
        end
        
        |||
    
    end
    
    Trainer -> Logger: record_ep_stats()
    activate Logger
    deactivate Logger
    
    |||
    
end
@enduml
